// This file is auto-generated by @hey-api/openapi-ts

export type ApiKeyResponse = {
    id: number;
    name: string;
    key_prefix: string;
    is_active: boolean;
    created_at: string;
    last_used_at?: string | null;
    archived_at?: string | null;
};

export type ApiKeyStatus = {
    model: string;
    message: string;
};

export type ApiKeyStatusResponse = {
    status: Array<ApiKeyStatus>;
};

export type AccessTokenResponse = {
    access_token: string | null;
    refresh_token: string | null;
    expires_at: string | null;
    connection_id: string;
};

export type AdminCommentRequest = {
    admin_comment: string;
};

export type AdminCommentResponse = {
    success: boolean;
    admin_comment: string;
    admin_comment_ts: string;
};

export type AuthUserResponse = {
    id: number;
    is_superuser: boolean;
};

export type CampaignProgressResponse = {
    campaign_id: number;
    state: string;
    total_rows: number;
    processed_rows: number;
    failed_calls: number;
    progress_percentage: number;
    source_sync: {
        [key: string]: unknown;
    };
    rate_limit: number;
    started_at: string | null;
    completed_at: string | null;
};

export type CampaignResponse = {
    id: number;
    name: string;
    workflow_id: number;
    workflow_name: string;
    state: string;
    source_type: string;
    source_id: string;
    total_rows: number | null;
    processed_rows: number;
    failed_rows: number;
    created_at: string;
    started_at: string | null;
    completed_at: string | null;
};

export type CampaignSourceDownloadResponse = {
    download_url: string;
    expires_in: number;
};

export type CampaignsResponse = {
    campaigns: Array<CampaignResponse>;
};

export type CreateApiKeyRequest = {
    name: string;
};

export type CreateApiKeyResponse = {
    id: number;
    name: string;
    key_prefix: string;
    api_key: string;
    created_at: string;
};

export type CreateCampaignRequest = {
    name: string;
    workflow_id: number;
    source_type: string;
    source_id: string;
};

export type CreateLoadTestRequest = {
    name_prefix: string;
    actor_workflow_id: number;
    adversary_workflow_id: number;
    test_count: number;
    config?: {
        [key: string]: unknown;
    };
};

export type CreateServiceKeyRequest = {
    name: string;
    expires_in_days?: number | null;
};

export type CreateServiceKeyResponse = {
    id: number;
    name: string;
    service_key: string;
    key_prefix: string;
    expires_at?: string | null;
};

export type CreateTestSessionRequest = {
    name: string;
    actor_workflow_id: number;
    adversary_workflow_id: number;
    config?: {
        [key: string]: unknown;
    };
};

export type CreateWorkflowRequest = {
    name: string;
    workflow_definition: {
        [key: string]: unknown;
    };
};

export type CreateWorkflowRunRequest = {
    mode: string;
    name: string;
};

export type CreateWorkflowRunResponse = {
    id: number;
    workflow_id: number;
    name: string;
    mode: string;
    created_at: string;
    definition_id: number;
    initial_context?: {
        [key: string]: unknown;
    } | null;
};

export type CreateWorkflowTemplateRequest = {
    call_type: 'INBOUND' | 'OUTBOUND';
    use_case: string;
    activity_description: string;
};

export type CurrentUsageResponse = {
    period_start: string;
    period_end: string;
    used_dograh_tokens: number;
    quota_dograh_tokens: number;
    percentage_used: number;
    next_refresh_date: string;
    quota_enabled: boolean;
    total_duration_seconds: number;
    used_amount_usd?: number | null;
    quota_amount_usd?: number | null;
    currency?: string | null;
    price_per_second_usd?: number | null;
};

export type DailyReportResponse = {
    date: string;
    timezone: string;
    workflow_id: number | null;
    metrics: {
        [key: string]: number;
    };
    disposition_distribution: Array<{
        [key: string]: unknown;
    }>;
    call_duration_distribution: Array<{
        [key: string]: unknown;
    }>;
};

export type DailyUsageBreakdownResponse = {
    breakdown: Array<DailyUsageItem>;
    total_minutes: number;
    total_cost_usd?: number | null;
    total_dograh_tokens: number;
    currency?: string | null;
};

export type DailyUsageItem = {
    date: string;
    minutes: number;
    cost_usd?: number | null;
    dograh_tokens: number;
    call_count: number;
};

export type DefaultConfigurationsResponse = {
    llm: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    tts: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    stt: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    default_providers: {
        [key: string]: string;
    };
};

export type DuplicateTemplateRequest = {
    template_id: number;
    workflow_name: string;
};

export type FileMetadataResponse = {
    key: string;
    metadata: {
        [key: string]: unknown;
    } | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Request payload for superadmin impersonation.
 *
 * Either ``provider_user_id`` **or** ``user_id`` must be supplied. If both are
 * provided, ``provider_user_id`` takes precedence.
 */
export type ImpersonateRequest = {
    provider_user_id?: string | null;
    user_id?: number | null;
};

export type ImpersonateResponse = {
    refresh_token: string;
    access_token: string;
};

export type IntegrationResponse = {
    id: number;
    integration_id: string;
    organisation_id: number;
    created_by: number | null;
    provider: string;
    is_active: boolean;
    created_at: string;
    action: string;
    provider_data: {
        [key: string]: unknown;
    };
};

export type ItemKind = 'node' | 'edge' | 'workflow';

export type LoadTestStatsResponse = {
    total: number;
    pending: number;
    running: number;
    completed: number;
    failed: number;
    sessions: Array<{
        [key: string]: unknown;
    }>;
};

export type PresignedUploadUrlRequest = {
    /**
     * CSV filename
     */
    file_name: string;
    /**
     * File size in bytes (max 10MB)
     */
    file_size: number;
    /**
     * File content type
     */
    content_type?: string;
};

export type PresignedUploadUrlResponse = {
    upload_url: string;
    file_key: string;
    expires_in: number;
};

export type RtcOfferRequest = {
    pc_id: string | null;
    sdp: string;
    type: string;
    workflow_id: number;
    workflow_run_id: number;
    restart_pc?: boolean;
    call_context_vars?: {
        [key: string]: unknown;
    } | null;
};

export type S3SignedUrlResponse = {
    url: string;
    expires_in: number;
};

export type ServiceKeyResponse = {
    name: string;
    id: number;
    key_prefix: string;
    is_active: boolean;
    created_at: string;
    last_used_at?: string | null;
    expires_at?: string | null;
    archived_at?: string | null;
    created_by?: string | null;
};

export type SessionResponse = {
    session_token: string;
    expires_at: string;
};

export type SuperuserWorkflowRunResponse = {
    id: number;
    name: string;
    workflow_id: number;
    workflow_name: string | null;
    user_id: number | null;
    organization_id: number | null;
    organization_name: string | null;
    mode: string;
    is_completed: boolean;
    recording_url: string | null;
    transcript_url: string | null;
    usage_info: {
        [key: string]: unknown;
    } | null;
    cost_info: {
        [key: string]: unknown;
    } | null;
    initial_context: {
        [key: string]: unknown;
    } | null;
    gathered_context: {
        [key: string]: unknown;
    } | null;
    admin_comment: string | null;
    admin_comment_ts: string | null;
    created_at: string;
};

export type SuperuserWorkflowRunsListResponse = {
    workflow_runs: Array<SuperuserWorkflowRunResponse>;
    total_count: number;
    page: number;
    limit: number;
    total_pages: number;
};

/**
 * Top-level telephony configuration response.
 */
export type TelephonyConfigurationResponse = {
    twilio?: TwilioConfigurationResponse | null;
    vonage?: VonageConfigurationResponse | null;
};

export type TestSessionResponse = {
    id: number;
    name: string;
    status: string;
    actor_workflow_id: number;
    adversary_workflow_id: number;
    load_test_group_id: string | null;
    test_index: number | null;
    config: {
        [key: string]: unknown;
    };
    results: {
        [key: string]: unknown;
    } | null;
    error: string | null;
    created_at: string;
    started_at: string | null;
    completed_at: string | null;
};

/**
 * Request schema for Twilio configuration.
 */
export type TwilioConfigurationRequest = {
    provider?: string;
    /**
     * Twilio Account SID
     */
    account_sid: string;
    /**
     * Twilio Auth Token
     */
    auth_token: string;
    /**
     * List of Twilio phone numbers
     */
    from_numbers: Array<string>;
};

/**
 * Response schema for Twilio configuration with masked sensitive fields.
 */
export type TwilioConfigurationResponse = {
    provider: string;
    account_sid: string;
    auth_token: string;
    from_numbers: Array<string>;
};

export type UpdateIntegrationRequest = {
    selected_files: Array<{
        [key: string]: unknown;
    }>;
};

export type UpdateWorkflowRequest = {
    name: string;
    workflow_definition?: {
        [key: string]: unknown;
    } | null;
    template_context_variables?: {
        [key: string]: unknown;
    } | null;
    workflow_configurations?: {
        [key: string]: unknown;
    } | null;
};

export type UpdateWorkflowStatusRequest = {
    status: string;
};

export type UsageHistoryResponse = {
    runs: Array<WorkflowRunUsageResponse>;
    total_dograh_tokens: number;
    total_duration_seconds: number;
    total_count: number;
    page: number;
    limit: number;
    total_pages: number;
};

export type UserConfigurationRequestResponseSchema = {
    llm?: {
        [key: string]: string | number;
    } | null;
    tts?: {
        [key: string]: string | number;
    } | null;
    stt?: {
        [key: string]: string | number;
    } | null;
    test_phone_number?: string | null;
    timezone?: string | null;
    organization_pricing?: {
        [key: string]: number | string | boolean;
    } | null;
};

export type ValidateWorkflowResponse = {
    is_valid: boolean;
    errors: Array<WorkflowError>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

/**
 * Request schema for Vonage configuration.
 */
export type VonageConfigurationRequest = {
    provider?: string;
    /**
     * Vonage API Key
     */
    api_key?: string | null;
    /**
     * Vonage API Secret
     */
    api_secret?: string | null;
    /**
     * Vonage Application ID
     */
    application_id: string;
    /**
     * Private key for JWT generation
     */
    private_key: string;
    /**
     * List of Vonage phone numbers (without + prefix)
     */
    from_numbers: Array<string>;
};

/**
 * Response schema for Vonage configuration with masked sensitive fields.
 */
export type VonageConfigurationResponse = {
    provider: string;
    application_id: string;
    api_key: string | null;
    api_secret: string | null;
    private_key: string;
    from_numbers: Array<string>;
};

export type WorkflowError = {
    kind: ItemKind;
    id: string | null;
    field: string | null;
    message: string;
};

export type WorkflowOption = {
    id: number;
    name: string;
};

export type WorkflowResponse = {
    id: number;
    name: string;
    status: string;
    created_at: string;
    workflow_definition: {
        [key: string]: unknown;
    };
    current_definition_id: number | null;
    template_context_variables?: {
        [key: string]: unknown;
    } | null;
    call_disposition_codes?: {
        [key: string]: unknown;
    } | null;
    total_runs?: number | null;
    workflow_configurations?: {
        [key: string]: unknown;
    } | null;
};

export type WorkflowRunDetail = {
    phone_number: string;
    disposition: string;
    duration_seconds: number;
    workflow_id: number;
    run_id: number;
    workflow_name: string;
    created_at: string;
};

export type WorkflowRunResponse = {
    id: number;
    workflow_id: number;
    state: string;
    created_at: string;
    completed_at: string | null;
};

export type WorkflowRunResponseSchema = {
    id: number;
    workflow_id: number;
    name: string;
    mode: string;
    created_at: string;
    is_completed: boolean;
    transcript_url: string | null;
    recording_url: string | null;
    cost_info: {
        [key: string]: unknown;
    } | null;
    definition_id: number | null;
    initial_context?: {
        [key: string]: unknown;
    } | null;
    gathered_context?: {
        [key: string]: unknown;
    } | null;
};

export type WorkflowRunUsageResponse = {
    id: number;
    workflow_id: number;
    workflow_name: string | null;
    name: string;
    created_at: string;
    dograh_token_usage: number;
    call_duration_seconds: number;
    recording_url?: string | null;
    transcript_url?: string | null;
    phone_number?: string | null;
    disposition?: string | null;
    initial_context?: {
        [key: string]: unknown;
    } | null;
    gathered_context?: {
        [key: string]: unknown;
    } | null;
    charge_usd?: number | null;
};

export type WorkflowRunsResponse = {
    runs: Array<WorkflowRunResponseSchema>;
    total_count: number;
    page: number;
    limit: number;
    total_pages: number;
    applied_filters?: Array<{
        [key: string]: unknown;
    }> | null;
};

export type WorkflowSummaryResponse = {
    id: number;
    name: string;
};

export type WorkflowTemplateResponse = {
    id: number;
    template_name: string;
    template_description: string;
    template_json: {
        [key: string]: unknown;
    };
    created_at: string;
};

export type ApiRoutesTelephonyInitiateCallRequest = {
    workflow_id: number;
    workflow_run_id?: number | null;
    phone_number?: string | null;
};

export type ApiRoutesTwilioInitiateCallRequest = {
    workflow_id: number;
    workflow_run_id?: number | null;
};

export type InitiateCallApiV1TelephonyInitiateCallPostData = {
    body: ApiRoutesTelephonyInitiateCallRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/telephony/initiate-call';
};

export type InitiateCallApiV1TelephonyInitiateCallPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InitiateCallApiV1TelephonyInitiateCallPostError = InitiateCallApiV1TelephonyInitiateCallPostErrors[keyof InitiateCallApiV1TelephonyInitiateCallPostErrors];

export type InitiateCallApiV1TelephonyInitiateCallPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostData = {
    body?: never;
    headers?: {
        'x-twilio-signature'?: string | null;
    };
    path: {
        workflow_run_id: number;
    };
    query?: never;
    url: '/api/v1/telephony/status-callback/{workflow_run_id}';
};

export type HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostError = HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostErrors[keyof HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostErrors];

export type HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostData = {
    body?: never;
    path: {
        workflow_run_id: number;
    };
    query?: never;
    url: '/api/v1/telephony/events/{workflow_run_id}';
};

export type HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostError = HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostErrors[keyof HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostErrors];

export type HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type InitiateCallApiV1TwilioInitiateCallPostData = {
    body: ApiRoutesTwilioInitiateCallRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/twilio/initiate-call';
};

export type InitiateCallApiV1TwilioInitiateCallPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InitiateCallApiV1TwilioInitiateCallPostError = InitiateCallApiV1TwilioInitiateCallPostErrors[keyof InitiateCallApiV1TwilioInitiateCallPostErrors];

export type InitiateCallApiV1TwilioInitiateCallPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type OfferApiV1PipecatRtcOfferPostData = {
    body: RtcOfferRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/pipecat/rtc-offer';
};

export type OfferApiV1PipecatRtcOfferPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OfferApiV1PipecatRtcOfferPostError = OfferApiV1PipecatRtcOfferPostErrors[keyof OfferApiV1PipecatRtcOfferPostErrors];

export type OfferApiV1PipecatRtcOfferPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ImpersonateApiV1SuperuserImpersonatePostData = {
    body: ImpersonateRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/superuser/impersonate';
};

export type ImpersonateApiV1SuperuserImpersonatePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ImpersonateApiV1SuperuserImpersonatePostError = ImpersonateApiV1SuperuserImpersonatePostErrors[keyof ImpersonateApiV1SuperuserImpersonatePostErrors];

export type ImpersonateApiV1SuperuserImpersonatePostResponses = {
    /**
     * Successful Response
     */
    200: ImpersonateResponse;
};

export type ImpersonateApiV1SuperuserImpersonatePostResponse = ImpersonateApiV1SuperuserImpersonatePostResponses[keyof ImpersonateApiV1SuperuserImpersonatePostResponses];

export type GetWorkflowRunsApiV1SuperuserWorkflowRunsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        /**
         * Page number (starts from 1)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
        /**
         * JSON-encoded filter criteria
         */
        filters?: string | null;
    };
    url: '/api/v1/superuser/workflow-runs';
};

export type GetWorkflowRunsApiV1SuperuserWorkflowRunsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowRunsApiV1SuperuserWorkflowRunsGetError = GetWorkflowRunsApiV1SuperuserWorkflowRunsGetErrors[keyof GetWorkflowRunsApiV1SuperuserWorkflowRunsGetErrors];

export type GetWorkflowRunsApiV1SuperuserWorkflowRunsGetResponses = {
    /**
     * Successful Response
     */
    200: SuperuserWorkflowRunsListResponse;
};

export type GetWorkflowRunsApiV1SuperuserWorkflowRunsGetResponse = GetWorkflowRunsApiV1SuperuserWorkflowRunsGetResponses[keyof GetWorkflowRunsApiV1SuperuserWorkflowRunsGetResponses];

export type SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostData = {
    body: AdminCommentRequest;
    headers?: {
        authorization?: string | null;
    };
    path: {
        run_id: number;
    };
    query?: never;
    url: '/api/v1/superuser/workflow-runs/{run_id}/comment';
};

export type SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostError = SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostErrors[keyof SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostErrors];

export type SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostResponses = {
    /**
     * Successful Response
     */
    200: AdminCommentResponse;
};

export type SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostResponse = SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostResponses[keyof SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostResponses];

export type ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        workflow_id: number;
    };
    query?: never;
    url: '/api/v1/workflow/{workflow_id}/validate';
};

export type ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostError = ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostErrors[keyof ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostErrors];

export type ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostResponses = {
    /**
     * Successful Response
     */
    200: ValidateWorkflowResponse;
};

export type ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostResponse = ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostResponses[keyof ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostResponses];

export type CreateWorkflowApiV1WorkflowCreateDefinitionPostData = {
    body: CreateWorkflowRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/workflow/create/definition';
};

export type CreateWorkflowApiV1WorkflowCreateDefinitionPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateWorkflowApiV1WorkflowCreateDefinitionPostError = CreateWorkflowApiV1WorkflowCreateDefinitionPostErrors[keyof CreateWorkflowApiV1WorkflowCreateDefinitionPostErrors];

export type CreateWorkflowApiV1WorkflowCreateDefinitionPostResponses = {
    /**
     * Successful Response
     */
    200: WorkflowResponse;
};

export type CreateWorkflowApiV1WorkflowCreateDefinitionPostResponse = CreateWorkflowApiV1WorkflowCreateDefinitionPostResponses[keyof CreateWorkflowApiV1WorkflowCreateDefinitionPostResponses];

export type CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostData = {
    body: CreateWorkflowTemplateRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/workflow/create/template';
};

export type CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostError = CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostErrors[keyof CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostErrors];

export type CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostResponses = {
    /**
     * Successful Response
     */
    200: WorkflowResponse;
};

export type CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostResponse = CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostResponses[keyof CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostResponses];

export type GetWorkflowsApiV1WorkflowFetchGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        /**
         * Filter by status - can be single value (active/archived) or comma-separated (active,archived)
         */
        status?: string | null;
    };
    url: '/api/v1/workflow/fetch';
};

export type GetWorkflowsApiV1WorkflowFetchGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowsApiV1WorkflowFetchGetError = GetWorkflowsApiV1WorkflowFetchGetErrors[keyof GetWorkflowsApiV1WorkflowFetchGetErrors];

export type GetWorkflowsApiV1WorkflowFetchGetResponses = {
    /**
     * Successful Response
     */
    200: Array<WorkflowResponse>;
};

export type GetWorkflowsApiV1WorkflowFetchGetResponse = GetWorkflowsApiV1WorkflowFetchGetResponses[keyof GetWorkflowsApiV1WorkflowFetchGetResponses];

export type GetWorkflowApiV1WorkflowFetchWorkflowIdGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        workflow_id: number;
    };
    query?: never;
    url: '/api/v1/workflow/fetch/{workflow_id}';
};

export type GetWorkflowApiV1WorkflowFetchWorkflowIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowApiV1WorkflowFetchWorkflowIdGetError = GetWorkflowApiV1WorkflowFetchWorkflowIdGetErrors[keyof GetWorkflowApiV1WorkflowFetchWorkflowIdGetErrors];

export type GetWorkflowApiV1WorkflowFetchWorkflowIdGetResponses = {
    /**
     * Successful Response
     */
    200: WorkflowResponse;
};

export type GetWorkflowApiV1WorkflowFetchWorkflowIdGetResponse = GetWorkflowApiV1WorkflowFetchWorkflowIdGetResponses[keyof GetWorkflowApiV1WorkflowFetchWorkflowIdGetResponses];

export type GetWorkflowsSummaryApiV1WorkflowSummaryGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/workflow/summary';
};

export type GetWorkflowsSummaryApiV1WorkflowSummaryGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowsSummaryApiV1WorkflowSummaryGetError = GetWorkflowsSummaryApiV1WorkflowSummaryGetErrors[keyof GetWorkflowsSummaryApiV1WorkflowSummaryGetErrors];

export type GetWorkflowsSummaryApiV1WorkflowSummaryGetResponses = {
    /**
     * Successful Response
     */
    200: Array<WorkflowSummaryResponse>;
};

export type GetWorkflowsSummaryApiV1WorkflowSummaryGetResponse = GetWorkflowsSummaryApiV1WorkflowSummaryGetResponses[keyof GetWorkflowsSummaryApiV1WorkflowSummaryGetResponses];

export type UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutData = {
    body: UpdateWorkflowStatusRequest;
    headers?: {
        authorization?: string | null;
    };
    path: {
        workflow_id: number;
    };
    query?: never;
    url: '/api/v1/workflow/{workflow_id}/status';
};

export type UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutError = UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutErrors[keyof UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutErrors];

export type UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutResponses = {
    /**
     * Successful Response
     */
    200: WorkflowResponse;
};

export type UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutResponse = UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutResponses[keyof UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutResponses];

export type UpdateWorkflowApiV1WorkflowWorkflowIdPutData = {
    body: UpdateWorkflowRequest;
    headers?: {
        authorization?: string | null;
    };
    path: {
        workflow_id: number;
    };
    query?: never;
    url: '/api/v1/workflow/{workflow_id}';
};

export type UpdateWorkflowApiV1WorkflowWorkflowIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateWorkflowApiV1WorkflowWorkflowIdPutError = UpdateWorkflowApiV1WorkflowWorkflowIdPutErrors[keyof UpdateWorkflowApiV1WorkflowWorkflowIdPutErrors];

export type UpdateWorkflowApiV1WorkflowWorkflowIdPutResponses = {
    /**
     * Successful Response
     */
    200: WorkflowResponse;
};

export type UpdateWorkflowApiV1WorkflowWorkflowIdPutResponse = UpdateWorkflowApiV1WorkflowWorkflowIdPutResponses[keyof UpdateWorkflowApiV1WorkflowWorkflowIdPutResponses];

export type GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        workflow_id: number;
    };
    query?: {
        page?: number;
        limit?: number;
        /**
         * JSON-encoded filter criteria
         */
        filters?: string | null;
    };
    url: '/api/v1/workflow/{workflow_id}/runs';
};

export type GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetError = GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetErrors[keyof GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetErrors];

export type GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetResponses = {
    /**
     * Successful Response
     */
    200: WorkflowRunsResponse;
};

export type GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetResponse = GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetResponses[keyof GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetResponses];

export type CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostData = {
    body: CreateWorkflowRunRequest;
    headers?: {
        authorization?: string | null;
    };
    path: {
        workflow_id: number;
    };
    query?: never;
    url: '/api/v1/workflow/{workflow_id}/runs';
};

export type CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostError = CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostErrors[keyof CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostErrors];

export type CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostResponses = {
    /**
     * Successful Response
     */
    200: CreateWorkflowRunResponse;
};

export type CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostResponse = CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostResponses[keyof CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostResponses];

export type GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        workflow_id: number;
        run_id: number;
    };
    query?: never;
    url: '/api/v1/workflow/{workflow_id}/runs/{run_id}';
};

export type GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetError = GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetErrors[keyof GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetErrors];

export type GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetResponses = {
    /**
     * Successful Response
     */
    200: WorkflowRunResponseSchema;
};

export type GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetResponse = GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetResponses[keyof GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetResponses];

export type GetWorkflowTemplatesApiV1WorkflowTemplatesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/workflow/templates';
};

export type GetWorkflowTemplatesApiV1WorkflowTemplatesGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetWorkflowTemplatesApiV1WorkflowTemplatesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<WorkflowTemplateResponse>;
};

export type GetWorkflowTemplatesApiV1WorkflowTemplatesGetResponse = GetWorkflowTemplatesApiV1WorkflowTemplatesGetResponses[keyof GetWorkflowTemplatesApiV1WorkflowTemplatesGetResponses];

export type DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostData = {
    body: DuplicateTemplateRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/workflow/templates/duplicate';
};

export type DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostError = DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostErrors[keyof DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostErrors];

export type DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostResponses = {
    /**
     * Successful Response
     */
    200: WorkflowResponse;
};

export type DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostResponse = DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostResponses[keyof DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostResponses];

export type GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/configurations/defaults';
};

export type GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetResponses = {
    /**
     * Successful Response
     */
    200: DefaultConfigurationsResponse;
};

export type GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetResponse = GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetResponses[keyof GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetResponses];

export type GetAuthUserApiV1UserAuthUserGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user/auth/user';
};

export type GetAuthUserApiV1UserAuthUserGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAuthUserApiV1UserAuthUserGetError = GetAuthUserApiV1UserAuthUserGetErrors[keyof GetAuthUserApiV1UserAuthUserGetErrors];

export type GetAuthUserApiV1UserAuthUserGetResponses = {
    /**
     * Successful Response
     */
    200: AuthUserResponse;
};

export type GetAuthUserApiV1UserAuthUserGetResponse = GetAuthUserApiV1UserAuthUserGetResponses[keyof GetAuthUserApiV1UserAuthUserGetResponses];

export type GetUserConfigurationsApiV1UserConfigurationsUserGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user/configurations/user';
};

export type GetUserConfigurationsApiV1UserConfigurationsUserGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserConfigurationsApiV1UserConfigurationsUserGetError = GetUserConfigurationsApiV1UserConfigurationsUserGetErrors[keyof GetUserConfigurationsApiV1UserConfigurationsUserGetErrors];

export type GetUserConfigurationsApiV1UserConfigurationsUserGetResponses = {
    /**
     * Successful Response
     */
    200: UserConfigurationRequestResponseSchema;
};

export type GetUserConfigurationsApiV1UserConfigurationsUserGetResponse = GetUserConfigurationsApiV1UserConfigurationsUserGetResponses[keyof GetUserConfigurationsApiV1UserConfigurationsUserGetResponses];

export type UpdateUserConfigurationsApiV1UserConfigurationsUserPutData = {
    body: UserConfigurationRequestResponseSchema;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user/configurations/user';
};

export type UpdateUserConfigurationsApiV1UserConfigurationsUserPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserConfigurationsApiV1UserConfigurationsUserPutError = UpdateUserConfigurationsApiV1UserConfigurationsUserPutErrors[keyof UpdateUserConfigurationsApiV1UserConfigurationsUserPutErrors];

export type UpdateUserConfigurationsApiV1UserConfigurationsUserPutResponses = {
    /**
     * Successful Response
     */
    200: UserConfigurationRequestResponseSchema;
};

export type UpdateUserConfigurationsApiV1UserConfigurationsUserPutResponse = UpdateUserConfigurationsApiV1UserConfigurationsUserPutResponses[keyof UpdateUserConfigurationsApiV1UserConfigurationsUserPutResponses];

export type ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        validity_ttl_seconds?: number;
    };
    url: '/api/v1/user/configurations/user/validate';
};

export type ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetError = ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetErrors[keyof ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetErrors];

export type ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetResponses = {
    /**
     * Successful Response
     */
    200: ApiKeyStatusResponse;
};

export type ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetResponse = ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetResponses[keyof ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetResponses];

export type GetApiKeysApiV1UserApiKeysGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        include_archived?: boolean;
    };
    url: '/api/v1/user/api-keys';
};

export type GetApiKeysApiV1UserApiKeysGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetApiKeysApiV1UserApiKeysGetError = GetApiKeysApiV1UserApiKeysGetErrors[keyof GetApiKeysApiV1UserApiKeysGetErrors];

export type GetApiKeysApiV1UserApiKeysGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ApiKeyResponse>;
};

export type GetApiKeysApiV1UserApiKeysGetResponse = GetApiKeysApiV1UserApiKeysGetResponses[keyof GetApiKeysApiV1UserApiKeysGetResponses];

export type CreateApiKeyApiV1UserApiKeysPostData = {
    body: CreateApiKeyRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user/api-keys';
};

export type CreateApiKeyApiV1UserApiKeysPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateApiKeyApiV1UserApiKeysPostError = CreateApiKeyApiV1UserApiKeysPostErrors[keyof CreateApiKeyApiV1UserApiKeysPostErrors];

export type CreateApiKeyApiV1UserApiKeysPostResponses = {
    /**
     * Successful Response
     */
    200: CreateApiKeyResponse;
};

export type CreateApiKeyApiV1UserApiKeysPostResponse = CreateApiKeyApiV1UserApiKeysPostResponses[keyof CreateApiKeyApiV1UserApiKeysPostResponses];

export type ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        api_key_id: number;
    };
    query?: never;
    url: '/api/v1/user/api-keys/{api_key_id}';
};

export type ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteError = ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteErrors[keyof ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteErrors];

export type ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteResponse = ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteResponses[keyof ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteResponses];

export type ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        api_key_id: number;
    };
    query?: never;
    url: '/api/v1/user/api-keys/{api_key_id}/reactivate';
};

export type ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutError = ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutErrors[keyof ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutErrors];

export type ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutResponse = ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutResponses[keyof ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutResponses];

export type CreateCampaignApiV1CampaignCreatePostData = {
    body: CreateCampaignRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/campaign/create';
};

export type CreateCampaignApiV1CampaignCreatePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCampaignApiV1CampaignCreatePostError = CreateCampaignApiV1CampaignCreatePostErrors[keyof CreateCampaignApiV1CampaignCreatePostErrors];

export type CreateCampaignApiV1CampaignCreatePostResponses = {
    /**
     * Successful Response
     */
    200: CampaignResponse;
};

export type CreateCampaignApiV1CampaignCreatePostResponse = CreateCampaignApiV1CampaignCreatePostResponses[keyof CreateCampaignApiV1CampaignCreatePostResponses];

export type GetCampaignsApiV1CampaignGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/campaign/';
};

export type GetCampaignsApiV1CampaignGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCampaignsApiV1CampaignGetError = GetCampaignsApiV1CampaignGetErrors[keyof GetCampaignsApiV1CampaignGetErrors];

export type GetCampaignsApiV1CampaignGetResponses = {
    /**
     * Successful Response
     */
    200: CampaignsResponse;
};

export type GetCampaignsApiV1CampaignGetResponse = GetCampaignsApiV1CampaignGetResponses[keyof GetCampaignsApiV1CampaignGetResponses];

export type GetCampaignApiV1CampaignCampaignIdGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        campaign_id: number;
    };
    query?: never;
    url: '/api/v1/campaign/{campaign_id}';
};

export type GetCampaignApiV1CampaignCampaignIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCampaignApiV1CampaignCampaignIdGetError = GetCampaignApiV1CampaignCampaignIdGetErrors[keyof GetCampaignApiV1CampaignCampaignIdGetErrors];

export type GetCampaignApiV1CampaignCampaignIdGetResponses = {
    /**
     * Successful Response
     */
    200: CampaignResponse;
};

export type GetCampaignApiV1CampaignCampaignIdGetResponse = GetCampaignApiV1CampaignCampaignIdGetResponses[keyof GetCampaignApiV1CampaignCampaignIdGetResponses];

export type StartCampaignApiV1CampaignCampaignIdStartPostData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        campaign_id: number;
    };
    query?: never;
    url: '/api/v1/campaign/{campaign_id}/start';
};

export type StartCampaignApiV1CampaignCampaignIdStartPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartCampaignApiV1CampaignCampaignIdStartPostError = StartCampaignApiV1CampaignCampaignIdStartPostErrors[keyof StartCampaignApiV1CampaignCampaignIdStartPostErrors];

export type StartCampaignApiV1CampaignCampaignIdStartPostResponses = {
    /**
     * Successful Response
     */
    200: CampaignResponse;
};

export type StartCampaignApiV1CampaignCampaignIdStartPostResponse = StartCampaignApiV1CampaignCampaignIdStartPostResponses[keyof StartCampaignApiV1CampaignCampaignIdStartPostResponses];

export type PauseCampaignApiV1CampaignCampaignIdPausePostData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        campaign_id: number;
    };
    query?: never;
    url: '/api/v1/campaign/{campaign_id}/pause';
};

export type PauseCampaignApiV1CampaignCampaignIdPausePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PauseCampaignApiV1CampaignCampaignIdPausePostError = PauseCampaignApiV1CampaignCampaignIdPausePostErrors[keyof PauseCampaignApiV1CampaignCampaignIdPausePostErrors];

export type PauseCampaignApiV1CampaignCampaignIdPausePostResponses = {
    /**
     * Successful Response
     */
    200: CampaignResponse;
};

export type PauseCampaignApiV1CampaignCampaignIdPausePostResponse = PauseCampaignApiV1CampaignCampaignIdPausePostResponses[keyof PauseCampaignApiV1CampaignCampaignIdPausePostResponses];

export type GetCampaignRunsApiV1CampaignCampaignIdRunsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        campaign_id: number;
    };
    query?: never;
    url: '/api/v1/campaign/{campaign_id}/runs';
};

export type GetCampaignRunsApiV1CampaignCampaignIdRunsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCampaignRunsApiV1CampaignCampaignIdRunsGetError = GetCampaignRunsApiV1CampaignCampaignIdRunsGetErrors[keyof GetCampaignRunsApiV1CampaignCampaignIdRunsGetErrors];

export type GetCampaignRunsApiV1CampaignCampaignIdRunsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<WorkflowRunResponse>;
};

export type GetCampaignRunsApiV1CampaignCampaignIdRunsGetResponse = GetCampaignRunsApiV1CampaignCampaignIdRunsGetResponses[keyof GetCampaignRunsApiV1CampaignCampaignIdRunsGetResponses];

export type ResumeCampaignApiV1CampaignCampaignIdResumePostData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        campaign_id: number;
    };
    query?: never;
    url: '/api/v1/campaign/{campaign_id}/resume';
};

export type ResumeCampaignApiV1CampaignCampaignIdResumePostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResumeCampaignApiV1CampaignCampaignIdResumePostError = ResumeCampaignApiV1CampaignCampaignIdResumePostErrors[keyof ResumeCampaignApiV1CampaignCampaignIdResumePostErrors];

export type ResumeCampaignApiV1CampaignCampaignIdResumePostResponses = {
    /**
     * Successful Response
     */
    200: CampaignResponse;
};

export type ResumeCampaignApiV1CampaignCampaignIdResumePostResponse = ResumeCampaignApiV1CampaignCampaignIdResumePostResponses[keyof ResumeCampaignApiV1CampaignCampaignIdResumePostResponses];

export type GetCampaignProgressApiV1CampaignCampaignIdProgressGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        campaign_id: number;
    };
    query?: never;
    url: '/api/v1/campaign/{campaign_id}/progress';
};

export type GetCampaignProgressApiV1CampaignCampaignIdProgressGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCampaignProgressApiV1CampaignCampaignIdProgressGetError = GetCampaignProgressApiV1CampaignCampaignIdProgressGetErrors[keyof GetCampaignProgressApiV1CampaignCampaignIdProgressGetErrors];

export type GetCampaignProgressApiV1CampaignCampaignIdProgressGetResponses = {
    /**
     * Successful Response
     */
    200: CampaignProgressResponse;
};

export type GetCampaignProgressApiV1CampaignCampaignIdProgressGetResponse = GetCampaignProgressApiV1CampaignCampaignIdProgressGetResponses[keyof GetCampaignProgressApiV1CampaignCampaignIdProgressGetResponses];

export type GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        campaign_id: number;
    };
    query?: never;
    url: '/api/v1/campaign/{campaign_id}/source-download-url';
};

export type GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetError = GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetErrors[keyof GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetErrors];

export type GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetResponses = {
    /**
     * Successful Response
     */
    200: CampaignSourceDownloadResponse;
};

export type GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetResponse = GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetResponses[keyof GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetResponses];

export type GetIntegrationsApiV1IntegrationGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/integration/';
};

export type GetIntegrationsApiV1IntegrationGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetIntegrationsApiV1IntegrationGetError = GetIntegrationsApiV1IntegrationGetErrors[keyof GetIntegrationsApiV1IntegrationGetErrors];

export type GetIntegrationsApiV1IntegrationGetResponses = {
    /**
     * Successful Response
     */
    200: Array<IntegrationResponse>;
};

export type GetIntegrationsApiV1IntegrationGetResponse = GetIntegrationsApiV1IntegrationGetResponses[keyof GetIntegrationsApiV1IntegrationGetResponses];

export type CreateSessionApiV1IntegrationSessionPostData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/integration/session';
};

export type CreateSessionApiV1IntegrationSessionPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSessionApiV1IntegrationSessionPostError = CreateSessionApiV1IntegrationSessionPostErrors[keyof CreateSessionApiV1IntegrationSessionPostErrors];

export type CreateSessionApiV1IntegrationSessionPostResponses = {
    /**
     * Successful Response
     */
    200: SessionResponse;
};

export type CreateSessionApiV1IntegrationSessionPostResponse = CreateSessionApiV1IntegrationSessionPostResponses[keyof CreateSessionApiV1IntegrationSessionPostResponses];

export type UpdateIntegrationApiV1IntegrationIntegrationIdPutData = {
    body: UpdateIntegrationRequest;
    headers?: {
        authorization?: string | null;
    };
    path: {
        integration_id: number;
    };
    query?: never;
    url: '/api/v1/integration/{integration_id}';
};

export type UpdateIntegrationApiV1IntegrationIntegrationIdPutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateIntegrationApiV1IntegrationIntegrationIdPutError = UpdateIntegrationApiV1IntegrationIntegrationIdPutErrors[keyof UpdateIntegrationApiV1IntegrationIntegrationIdPutErrors];

export type UpdateIntegrationApiV1IntegrationIntegrationIdPutResponses = {
    /**
     * Successful Response
     */
    200: IntegrationResponse;
};

export type UpdateIntegrationApiV1IntegrationIntegrationIdPutResponse = UpdateIntegrationApiV1IntegrationIntegrationIdPutResponses[keyof UpdateIntegrationApiV1IntegrationIntegrationIdPutResponses];

export type GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        integration_id: number;
    };
    query?: never;
    url: '/api/v1/integration/{integration_id}/access-token';
};

export type GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetError = GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetErrors[keyof GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetErrors];

export type GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetResponses = {
    /**
     * Successful Response
     */
    200: AccessTokenResponse;
};

export type GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetResponse = GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetResponses[keyof GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetResponses];

export type GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        provider?: string | null;
    };
    url: '/api/v1/organizations/telephony-config';
};

export type GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetError = GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetErrors[keyof GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetErrors];

export type GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetResponses = {
    /**
     * Successful Response
     */
    200: TelephonyConfigurationResponse;
};

export type GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetResponse = GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetResponses[keyof GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetResponses];

export type SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostData = {
    body: TwilioConfigurationRequest | VonageConfigurationRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/organizations/telephony-config';
};

export type SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostError = SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostErrors[keyof SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostErrors];

export type SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSignedUrlApiV1S3SignedUrlGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query: {
        /**
         * S3 object key
         */
        key: string;
        expires_in?: number;
        inline?: boolean;
    };
    url: '/api/v1/s3/signed-url';
};

export type GetSignedUrlApiV1S3SignedUrlGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSignedUrlApiV1S3SignedUrlGetError = GetSignedUrlApiV1S3SignedUrlGetErrors[keyof GetSignedUrlApiV1S3SignedUrlGetErrors];

export type GetSignedUrlApiV1S3SignedUrlGetResponses = {
    /**
     * Successful Response
     */
    200: S3SignedUrlResponse;
};

export type GetSignedUrlApiV1S3SignedUrlGetResponse = GetSignedUrlApiV1S3SignedUrlGetResponses[keyof GetSignedUrlApiV1S3SignedUrlGetResponses];

export type GetFileMetadataApiV1S3FileMetadataGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query: {
        /**
         * S3 object key
         */
        key: string;
    };
    url: '/api/v1/s3/file-metadata';
};

export type GetFileMetadataApiV1S3FileMetadataGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileMetadataApiV1S3FileMetadataGetError = GetFileMetadataApiV1S3FileMetadataGetErrors[keyof GetFileMetadataApiV1S3FileMetadataGetErrors];

export type GetFileMetadataApiV1S3FileMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: FileMetadataResponse;
};

export type GetFileMetadataApiV1S3FileMetadataGetResponse = GetFileMetadataApiV1S3FileMetadataGetResponses[keyof GetFileMetadataApiV1S3FileMetadataGetResponses];

export type GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostData = {
    body: PresignedUploadUrlRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/s3/presigned-upload-url';
};

export type GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostError = GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostErrors[keyof GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostErrors];

export type GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostResponses = {
    /**
     * Successful Response
     */
    200: PresignedUploadUrlResponse;
};

export type GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostResponse = GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostResponses[keyof GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostResponses];

export type GetServiceKeysApiV1UserServiceKeysGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        include_archived?: boolean;
    };
    url: '/api/v1/user/service-keys';
};

export type GetServiceKeysApiV1UserServiceKeysGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetServiceKeysApiV1UserServiceKeysGetError = GetServiceKeysApiV1UserServiceKeysGetErrors[keyof GetServiceKeysApiV1UserServiceKeysGetErrors];

export type GetServiceKeysApiV1UserServiceKeysGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ServiceKeyResponse>;
};

export type GetServiceKeysApiV1UserServiceKeysGetResponse = GetServiceKeysApiV1UserServiceKeysGetResponses[keyof GetServiceKeysApiV1UserServiceKeysGetResponses];

export type CreateServiceKeyApiV1UserServiceKeysPostData = {
    body: CreateServiceKeyRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user/service-keys';
};

export type CreateServiceKeyApiV1UserServiceKeysPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateServiceKeyApiV1UserServiceKeysPostError = CreateServiceKeyApiV1UserServiceKeysPostErrors[keyof CreateServiceKeyApiV1UserServiceKeysPostErrors];

export type CreateServiceKeyApiV1UserServiceKeysPostResponses = {
    /**
     * Successful Response
     */
    200: CreateServiceKeyResponse;
};

export type CreateServiceKeyApiV1UserServiceKeysPostResponse = CreateServiceKeyApiV1UserServiceKeysPostResponses[keyof CreateServiceKeyApiV1UserServiceKeysPostResponses];

export type ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        service_key_id: string;
    };
    query?: never;
    url: '/api/v1/user/service-keys/{service_key_id}';
};

export type ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteError = ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteErrors[keyof ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteErrors];

export type ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        service_key_id: string;
    };
    query?: never;
    url: '/api/v1/user/service-keys/{service_key_id}/reactivate';
};

export type ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutError = ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutErrors[keyof ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutErrors];

export type ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListTestSessionsApiV1LooptalkTestSessionsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        status?: string | null;
        load_test_group_id?: string | null;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/looptalk/test-sessions';
};

export type ListTestSessionsApiV1LooptalkTestSessionsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTestSessionsApiV1LooptalkTestSessionsGetError = ListTestSessionsApiV1LooptalkTestSessionsGetErrors[keyof ListTestSessionsApiV1LooptalkTestSessionsGetErrors];

export type ListTestSessionsApiV1LooptalkTestSessionsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<TestSessionResponse>;
};

export type ListTestSessionsApiV1LooptalkTestSessionsGetResponse = ListTestSessionsApiV1LooptalkTestSessionsGetResponses[keyof ListTestSessionsApiV1LooptalkTestSessionsGetResponses];

export type CreateTestSessionApiV1LooptalkTestSessionsPostData = {
    body: CreateTestSessionRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/looptalk/test-sessions';
};

export type CreateTestSessionApiV1LooptalkTestSessionsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTestSessionApiV1LooptalkTestSessionsPostError = CreateTestSessionApiV1LooptalkTestSessionsPostErrors[keyof CreateTestSessionApiV1LooptalkTestSessionsPostErrors];

export type CreateTestSessionApiV1LooptalkTestSessionsPostResponses = {
    /**
     * Successful Response
     */
    200: TestSessionResponse;
};

export type CreateTestSessionApiV1LooptalkTestSessionsPostResponse = CreateTestSessionApiV1LooptalkTestSessionsPostResponses[keyof CreateTestSessionApiV1LooptalkTestSessionsPostResponses];

export type GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        test_session_id: number;
    };
    query?: never;
    url: '/api/v1/looptalk/test-sessions/{test_session_id}';
};

export type GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetError = GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetErrors[keyof GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetErrors];

export type GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetResponses = {
    /**
     * Successful Response
     */
    200: TestSessionResponse;
};

export type GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetResponse = GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetResponses[keyof GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetResponses];

export type StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        test_session_id: number;
    };
    query?: never;
    url: '/api/v1/looptalk/test-sessions/{test_session_id}/start';
};

export type StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostError = StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostErrors[keyof StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostErrors];

export type StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        test_session_id: number;
    };
    query?: never;
    url: '/api/v1/looptalk/test-sessions/{test_session_id}/stop';
};

export type StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostError = StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostErrors[keyof StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostErrors];

export type StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        test_session_id: number;
    };
    query?: never;
    url: '/api/v1/looptalk/test-sessions/{test_session_id}/conversation';
};

export type GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetError = GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetErrors[keyof GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetErrors];

export type GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateLoadTestApiV1LooptalkLoadTestsPostData = {
    body: CreateLoadTestRequest;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/looptalk/load-tests';
};

export type CreateLoadTestApiV1LooptalkLoadTestsPostErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateLoadTestApiV1LooptalkLoadTestsPostError = CreateLoadTestApiV1LooptalkLoadTestsPostErrors[keyof CreateLoadTestApiV1LooptalkLoadTestsPostErrors];

export type CreateLoadTestApiV1LooptalkLoadTestsPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type CreateLoadTestApiV1LooptalkLoadTestsPostResponse = CreateLoadTestApiV1LooptalkLoadTestsPostResponses[keyof CreateLoadTestApiV1LooptalkLoadTestsPostResponses];

export type GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path: {
        load_test_group_id: string;
    };
    query?: never;
    url: '/api/v1/looptalk/load-tests/{load_test_group_id}/stats';
};

export type GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetError = GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetErrors[keyof GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetErrors];

export type GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetResponses = {
    /**
     * Successful Response
     */
    200: LoadTestStatsResponse;
};

export type GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetResponse = GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetResponses[keyof GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetResponses];

export type GetActiveTestsApiV1LooptalkActiveTestsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/looptalk/active-tests';
};

export type GetActiveTestsApiV1LooptalkActiveTestsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetActiveTestsApiV1LooptalkActiveTestsGetError = GetActiveTestsApiV1LooptalkActiveTestsGetErrors[keyof GetActiveTestsApiV1LooptalkActiveTestsGetErrors];

export type GetActiveTestsApiV1LooptalkActiveTestsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/organizations/usage/current-period';
};

export type GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetError = GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetErrors[keyof GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetErrors];

export type GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetResponses = {
    /**
     * Successful Response
     */
    200: CurrentUsageResponse;
};

export type GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetResponse = GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetResponses[keyof GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetResponses];

export type GetUsageHistoryApiV1OrganizationsUsageRunsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        /**
         * ISO format date string
         */
        start_date?: string | null;
        /**
         * ISO format date string
         */
        end_date?: string | null;
        page?: number;
        limit?: number;
        /**
         * JSON string of filters
         */
        filters?: string | null;
    };
    url: '/api/v1/organizations/usage/runs';
};

export type GetUsageHistoryApiV1OrganizationsUsageRunsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUsageHistoryApiV1OrganizationsUsageRunsGetError = GetUsageHistoryApiV1OrganizationsUsageRunsGetErrors[keyof GetUsageHistoryApiV1OrganizationsUsageRunsGetErrors];

export type GetUsageHistoryApiV1OrganizationsUsageRunsGetResponses = {
    /**
     * Successful Response
     */
    200: UsageHistoryResponse;
};

export type GetUsageHistoryApiV1OrganizationsUsageRunsGetResponse = GetUsageHistoryApiV1OrganizationsUsageRunsGetResponses[keyof GetUsageHistoryApiV1OrganizationsUsageRunsGetResponses];

export type GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: {
        /**
         * Number of days to include
         */
        days?: number;
    };
    url: '/api/v1/organizations/usage/daily-breakdown';
};

export type GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetError = GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetErrors[keyof GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetErrors];

export type GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetResponses = {
    /**
     * Successful Response
     */
    200: DailyUsageBreakdownResponse;
};

export type GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetResponse = GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetResponses[keyof GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetResponses];

export type GetDailyReportApiV1OrganizationsReportsDailyGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query: {
        /**
         * Date in YYYY-MM-DD format
         */
        date: string;
        /**
         * IANA timezone (e.g., 'America/New_York')
         */
        timezone: string;
        /**
         * Optional workflow ID to filter by
         */
        workflow_id?: number | null;
    };
    url: '/api/v1/organizations/reports/daily';
};

export type GetDailyReportApiV1OrganizationsReportsDailyGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDailyReportApiV1OrganizationsReportsDailyGetError = GetDailyReportApiV1OrganizationsReportsDailyGetErrors[keyof GetDailyReportApiV1OrganizationsReportsDailyGetErrors];

export type GetDailyReportApiV1OrganizationsReportsDailyGetResponses = {
    /**
     * Successful Response
     */
    200: DailyReportResponse;
};

export type GetDailyReportApiV1OrganizationsReportsDailyGetResponse = GetDailyReportApiV1OrganizationsReportsDailyGetResponses[keyof GetDailyReportApiV1OrganizationsReportsDailyGetResponses];

export type GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query?: never;
    url: '/api/v1/organizations/reports/workflows';
};

export type GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetError = GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetErrors[keyof GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetErrors];

export type GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<WorkflowOption>;
};

export type GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetResponse = GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetResponses[keyof GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetResponses];

export type GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetData = {
    body?: never;
    headers?: {
        authorization?: string | null;
    };
    path?: never;
    query: {
        /**
         * Date in YYYY-MM-DD format
         */
        date: string;
        /**
         * IANA timezone (e.g., 'America/New_York')
         */
        timezone: string;
        /**
         * Optional workflow ID to filter by
         */
        workflow_id?: number | null;
    };
    url: '/api/v1/organizations/reports/daily/runs';
};

export type GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetErrors = {
    /**
     * Not found
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetError = GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetErrors[keyof GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetErrors];

export type GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<WorkflowRunDetail>;
};

export type GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetResponse = GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetResponses[keyof GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetResponses];

export type HealthApiV1HealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health';
};

export type HealthApiV1HealthGetErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type HealthApiV1HealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://127.0.0.1:8000' | (string & {});
};