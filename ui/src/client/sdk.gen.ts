// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { InitiateCallApiV1TelephonyInitiateCallPostData, InitiateCallApiV1TelephonyInitiateCallPostError, HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostData, HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostError, HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostData, HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostError, InitiateCallApiV1TwilioInitiateCallPostData, InitiateCallApiV1TwilioInitiateCallPostError, OfferApiV1PipecatRtcOfferPostData, OfferApiV1PipecatRtcOfferPostError, ImpersonateApiV1SuperuserImpersonatePostData, ImpersonateApiV1SuperuserImpersonatePostResponse, ImpersonateApiV1SuperuserImpersonatePostError, GetWorkflowRunsApiV1SuperuserWorkflowRunsGetData, GetWorkflowRunsApiV1SuperuserWorkflowRunsGetResponse, GetWorkflowRunsApiV1SuperuserWorkflowRunsGetError, SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostData, SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostResponse, SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostError, ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostData, ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostResponse, ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostError, CreateWorkflowApiV1WorkflowCreateDefinitionPostData, CreateWorkflowApiV1WorkflowCreateDefinitionPostResponse, CreateWorkflowApiV1WorkflowCreateDefinitionPostError, CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostData, CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostResponse, CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostError, GetWorkflowsApiV1WorkflowFetchGetData, GetWorkflowsApiV1WorkflowFetchGetResponse, GetWorkflowsApiV1WorkflowFetchGetError, GetWorkflowApiV1WorkflowFetchWorkflowIdGetData, GetWorkflowApiV1WorkflowFetchWorkflowIdGetResponse, GetWorkflowApiV1WorkflowFetchWorkflowIdGetError, GetWorkflowsSummaryApiV1WorkflowSummaryGetData, GetWorkflowsSummaryApiV1WorkflowSummaryGetResponse, GetWorkflowsSummaryApiV1WorkflowSummaryGetError, UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutData, UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutResponse, UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutError, UpdateWorkflowApiV1WorkflowWorkflowIdPutData, UpdateWorkflowApiV1WorkflowWorkflowIdPutResponse, UpdateWorkflowApiV1WorkflowWorkflowIdPutError, GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetData, GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetResponse, GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetError, CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostData, CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostResponse, CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostError, GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetData, GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetResponse, GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetError, GetWorkflowTemplatesApiV1WorkflowTemplatesGetData, GetWorkflowTemplatesApiV1WorkflowTemplatesGetResponse, DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostData, DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostResponse, DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostError, GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetData, GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetResponse, GetAuthUserApiV1UserAuthUserGetData, GetAuthUserApiV1UserAuthUserGetResponse, GetAuthUserApiV1UserAuthUserGetError, GetUserConfigurationsApiV1UserConfigurationsUserGetData, GetUserConfigurationsApiV1UserConfigurationsUserGetResponse, GetUserConfigurationsApiV1UserConfigurationsUserGetError, UpdateUserConfigurationsApiV1UserConfigurationsUserPutData, UpdateUserConfigurationsApiV1UserConfigurationsUserPutResponse, UpdateUserConfigurationsApiV1UserConfigurationsUserPutError, ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetData, ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetResponse, ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetError, GetApiKeysApiV1UserApiKeysGetData, GetApiKeysApiV1UserApiKeysGetResponse, GetApiKeysApiV1UserApiKeysGetError, CreateApiKeyApiV1UserApiKeysPostData, CreateApiKeyApiV1UserApiKeysPostResponse, CreateApiKeyApiV1UserApiKeysPostError, ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteData, ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteResponse, ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteError, ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutData, ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutResponse, ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutError, CreateCampaignApiV1CampaignCreatePostData, CreateCampaignApiV1CampaignCreatePostResponse, CreateCampaignApiV1CampaignCreatePostError, GetCampaignsApiV1CampaignGetData, GetCampaignsApiV1CampaignGetResponse, GetCampaignsApiV1CampaignGetError, GetCampaignApiV1CampaignCampaignIdGetData, GetCampaignApiV1CampaignCampaignIdGetResponse, GetCampaignApiV1CampaignCampaignIdGetError, StartCampaignApiV1CampaignCampaignIdStartPostData, StartCampaignApiV1CampaignCampaignIdStartPostResponse, StartCampaignApiV1CampaignCampaignIdStartPostError, PauseCampaignApiV1CampaignCampaignIdPausePostData, PauseCampaignApiV1CampaignCampaignIdPausePostResponse, PauseCampaignApiV1CampaignCampaignIdPausePostError, GetCampaignRunsApiV1CampaignCampaignIdRunsGetData, GetCampaignRunsApiV1CampaignCampaignIdRunsGetResponse, GetCampaignRunsApiV1CampaignCampaignIdRunsGetError, ResumeCampaignApiV1CampaignCampaignIdResumePostData, ResumeCampaignApiV1CampaignCampaignIdResumePostResponse, ResumeCampaignApiV1CampaignCampaignIdResumePostError, GetCampaignProgressApiV1CampaignCampaignIdProgressGetData, GetCampaignProgressApiV1CampaignCampaignIdProgressGetResponse, GetCampaignProgressApiV1CampaignCampaignIdProgressGetError, GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetData, GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetResponse, GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetError, GetIntegrationsApiV1IntegrationGetData, GetIntegrationsApiV1IntegrationGetResponse, GetIntegrationsApiV1IntegrationGetError, CreateSessionApiV1IntegrationSessionPostData, CreateSessionApiV1IntegrationSessionPostResponse, CreateSessionApiV1IntegrationSessionPostError, UpdateIntegrationApiV1IntegrationIntegrationIdPutData, UpdateIntegrationApiV1IntegrationIntegrationIdPutResponse, UpdateIntegrationApiV1IntegrationIntegrationIdPutError, GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetData, GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetResponse, GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetError, GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetData, GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetResponse, GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetError, SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostData, SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostError, GetSignedUrlApiV1S3SignedUrlGetData, GetSignedUrlApiV1S3SignedUrlGetResponse, GetSignedUrlApiV1S3SignedUrlGetError, GetFileMetadataApiV1S3FileMetadataGetData, GetFileMetadataApiV1S3FileMetadataGetResponse, GetFileMetadataApiV1S3FileMetadataGetError, GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostData, GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostResponse, GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostError, GetServiceKeysApiV1UserServiceKeysGetData, GetServiceKeysApiV1UserServiceKeysGetResponse, GetServiceKeysApiV1UserServiceKeysGetError, CreateServiceKeyApiV1UserServiceKeysPostData, CreateServiceKeyApiV1UserServiceKeysPostResponse, CreateServiceKeyApiV1UserServiceKeysPostError, ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteData, ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteError, ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutData, ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutError, ListTestSessionsApiV1LooptalkTestSessionsGetData, ListTestSessionsApiV1LooptalkTestSessionsGetResponse, ListTestSessionsApiV1LooptalkTestSessionsGetError, CreateTestSessionApiV1LooptalkTestSessionsPostData, CreateTestSessionApiV1LooptalkTestSessionsPostResponse, CreateTestSessionApiV1LooptalkTestSessionsPostError, GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetData, GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetResponse, GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetError, StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostData, StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostError, StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostData, StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostError, GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetData, GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetError, CreateLoadTestApiV1LooptalkLoadTestsPostData, CreateLoadTestApiV1LooptalkLoadTestsPostResponse, CreateLoadTestApiV1LooptalkLoadTestsPostError, GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetData, GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetResponse, GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetError, GetActiveTestsApiV1LooptalkActiveTestsGetData, GetActiveTestsApiV1LooptalkActiveTestsGetError, GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetData, GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetResponse, GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetError, GetUsageHistoryApiV1OrganizationsUsageRunsGetData, GetUsageHistoryApiV1OrganizationsUsageRunsGetResponse, GetUsageHistoryApiV1OrganizationsUsageRunsGetError, GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetData, GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetResponse, GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetError, GetDailyReportApiV1OrganizationsReportsDailyGetData, GetDailyReportApiV1OrganizationsReportsDailyGetResponse, GetDailyReportApiV1OrganizationsReportsDailyGetError, GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetData, GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetResponse, GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetError, GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetData, GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetResponse, GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetError, HealthApiV1HealthGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Initiate Call
 * Initiate a call using the configured telephony provider.
 */
export const initiateCallApiV1TelephonyInitiateCallPost = <ThrowOnError extends boolean = false>(options: Options<InitiateCallApiV1TelephonyInitiateCallPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, InitiateCallApiV1TelephonyInitiateCallPostError, ThrowOnError>({
        url: '/api/v1/telephony/initiate-call',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Handle Status Callback
 * Handle status callbacks from telephony providers.
 */
export const handleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPost = <ThrowOnError extends boolean = false>(options: Options<HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, HandleStatusCallbackApiV1TelephonyStatusCallbackWorkflowRunIdPostError, ThrowOnError>({
        url: '/api/v1/telephony/status-callback/{workflow_run_id}',
        ...options
    });
};

/**
 * Handle Vonage Events
 * Handle Vonage event webhooks.
 *
 * Vonage sends all call events to a single endpoint.
 * Events include: started, ringing, answered, complete, failed, etc.
 */
export const handleVonageEventsApiV1TelephonyEventsWorkflowRunIdPost = <ThrowOnError extends boolean = false>(options: Options<HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, HandleVonageEventsApiV1TelephonyEventsWorkflowRunIdPostError, ThrowOnError>({
        url: '/api/v1/telephony/events/{workflow_run_id}',
        ...options
    });
};

/**
 * Initiate Call
 */
export const initiateCallApiV1TwilioInitiateCallPost = <ThrowOnError extends boolean = false>(options: Options<InitiateCallApiV1TwilioInitiateCallPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, InitiateCallApiV1TwilioInitiateCallPostError, ThrowOnError>({
        url: '/api/v1/twilio/initiate-call',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Offer
 */
export const offerApiV1PipecatRtcOfferPost = <ThrowOnError extends boolean = false>(options: Options<OfferApiV1PipecatRtcOfferPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, OfferApiV1PipecatRtcOfferPostError, ThrowOnError>({
        url: '/api/v1/pipecat/rtc-offer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Impersonate
 * Impersonate a user as a super-admin.
 * Internally, Stack Auth requires the **provider user ID** (a UUID-ish string)
 * to create an impersonation session.
 */
export const impersonateApiV1SuperuserImpersonatePost = <ThrowOnError extends boolean = false>(options: Options<ImpersonateApiV1SuperuserImpersonatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImpersonateApiV1SuperuserImpersonatePostResponse, ImpersonateApiV1SuperuserImpersonatePostError, ThrowOnError>({
        url: '/api/v1/superuser/impersonate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Workflow Runs
 * Get paginated list of all workflow runs with organization information.
 * Requires superuser privileges.
 *
 * Filters should be provided as a JSON-encoded array of filter criteria.
 * Example: [{"field": "id", "type": "number", "value": {"value": 680}}]
 */
export const getWorkflowRunsApiV1SuperuserWorkflowRunsGet = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowRunsApiV1SuperuserWorkflowRunsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowRunsApiV1SuperuserWorkflowRunsGetResponse, GetWorkflowRunsApiV1SuperuserWorkflowRunsGetError, ThrowOnError>({
        url: '/api/v1/superuser/workflow-runs',
        ...options
    });
};

/**
 * Set Admin Comment
 * Add or update an *admin-only* comment for a workflow run.
 *
 * The comment is stored inside the ``annotations`` JSON column under the
 * ``admin_comment`` key so that it does not interfere with any other
 * annotations recorded by the system.
 */
export const setAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPost = <ThrowOnError extends boolean = false>(options: Options<SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostResponse, SetAdminCommentApiV1SuperuserWorkflowRunsRunIdCommentPostError, ThrowOnError>({
        url: '/api/v1/superuser/workflow-runs/{run_id}/comment',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Validate Workflow
 * Validate all nodes in a workflow to ensure they have required fields.
 *
 * Args:
 * workflow_id: The ID of the workflow to validate
 * user: The authenticated user
 *
 * Returns:
 * Object indicating if workflow is valid and any invalid nodes/edges
 */
export const validateWorkflowApiV1WorkflowWorkflowIdValidatePost = <ThrowOnError extends boolean = false>(options: Options<ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostResponse, ValidateWorkflowApiV1WorkflowWorkflowIdValidatePostError, ThrowOnError>({
        url: '/api/v1/workflow/{workflow_id}/validate',
        ...options
    });
};

/**
 * Create Workflow
 * Create a new workflow from the client
 *
 * Args:
 * request: The create workflow request
 * user: The user to create the workflow for
 */
export const createWorkflowApiV1WorkflowCreateDefinitionPost = <ThrowOnError extends boolean = false>(options: Options<CreateWorkflowApiV1WorkflowCreateDefinitionPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorkflowApiV1WorkflowCreateDefinitionPostResponse, CreateWorkflowApiV1WorkflowCreateDefinitionPostError, ThrowOnError>({
        url: '/api/v1/workflow/create/definition',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Workflow From Template
 * Create a new workflow from a natural language template request.
 *
 * This endpoint:
 * 1. Uses mps_service_key_client to call MPS workflow API
 * 2. Passes organization ID (authenticated mode) or created_by (OSS mode)
 * 3. Creates the workflow in the database
 *
 * Args:
 * request: The template creation request with call_type, use_case, and activity_description
 * user: The authenticated user
 *
 * Returns:
 * The created workflow
 *
 * Raises:
 * HTTPException: If MPS API call fails
 */
export const createWorkflowFromTemplateApiV1WorkflowCreateTemplatePost = <ThrowOnError extends boolean = false>(options: Options<CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostResponse, CreateWorkflowFromTemplateApiV1WorkflowCreateTemplatePostError, ThrowOnError>({
        url: '/api/v1/workflow/create/template',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Workflows
 * Get all workflows for the authenticated user's organization
 */
export const getWorkflowsApiV1WorkflowFetchGet = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowsApiV1WorkflowFetchGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowsApiV1WorkflowFetchGetResponse, GetWorkflowsApiV1WorkflowFetchGetError, ThrowOnError>({
        url: '/api/v1/workflow/fetch',
        ...options
    });
};

/**
 * Get Workflow
 * Get a single workflow by ID
 */
export const getWorkflowApiV1WorkflowFetchWorkflowIdGet = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowApiV1WorkflowFetchWorkflowIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowApiV1WorkflowFetchWorkflowIdGetResponse, GetWorkflowApiV1WorkflowFetchWorkflowIdGetError, ThrowOnError>({
        url: '/api/v1/workflow/fetch/{workflow_id}',
        ...options
    });
};

/**
 * Get Workflows Summary
 * Get minimal workflow information (id and name only) for all workflows
 */
export const getWorkflowsSummaryApiV1WorkflowSummaryGet = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowsSummaryApiV1WorkflowSummaryGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowsSummaryApiV1WorkflowSummaryGetResponse, GetWorkflowsSummaryApiV1WorkflowSummaryGetError, ThrowOnError>({
        url: '/api/v1/workflow/summary',
        ...options
    });
};

/**
 * Update Workflow Status
 * Update the status of a workflow (e.g., archive/unarchive).
 *
 * Args:
 * workflow_id: The ID of the workflow to update
 * request: The status update request
 *
 * Returns:
 * The updated workflow
 */
export const updateWorkflowStatusApiV1WorkflowWorkflowIdStatusPut = <ThrowOnError extends boolean = false>(options: Options<UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutResponse, UpdateWorkflowStatusApiV1WorkflowWorkflowIdStatusPutError, ThrowOnError>({
        url: '/api/v1/workflow/{workflow_id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update Workflow
 * Update an existing workflow.
 *
 * Args:
 * workflow_id: The ID of the workflow to update
 * request: The update request containing the new name and workflow definition
 *
 * Returns:
 * The updated workflow
 *
 * Raises:
 * HTTPException: If the workflow is not found or if there's a database error
 */
export const updateWorkflowApiV1WorkflowWorkflowIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateWorkflowApiV1WorkflowWorkflowIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWorkflowApiV1WorkflowWorkflowIdPutResponse, UpdateWorkflowApiV1WorkflowWorkflowIdPutError, ThrowOnError>({
        url: '/api/v1/workflow/{workflow_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Workflow Runs
 * Get workflow runs with optional filtering.
 *
 * Filters should be provided as a JSON-encoded array of filter criteria.
 * Example: [{"attribute": "dateRange", "value": {"from": "2024-01-01", "to": "2024-01-31"}}]
 */
export const getWorkflowRunsApiV1WorkflowWorkflowIdRunsGet = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetResponse, GetWorkflowRunsApiV1WorkflowWorkflowIdRunsGetError, ThrowOnError>({
        url: '/api/v1/workflow/{workflow_id}/runs',
        ...options
    });
};

/**
 * Create Workflow Run
 * Create a new workflow run when the user decides to execute the workflow via chat or voice
 *
 * Args:
 * workflow_id: The ID of the workflow to run
 * request: The create workflow run request
 * user: The user to create the workflow run for
 */
export const createWorkflowRunApiV1WorkflowWorkflowIdRunsPost = <ThrowOnError extends boolean = false>(options: Options<CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostResponse, CreateWorkflowRunApiV1WorkflowWorkflowIdRunsPostError, ThrowOnError>({
        url: '/api/v1/workflow/{workflow_id}/runs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Workflow Run
 */
export const getWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGet = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetResponse, GetWorkflowRunApiV1WorkflowWorkflowIdRunsRunIdGetError, ThrowOnError>({
        url: '/api/v1/workflow/{workflow_id}/runs/{run_id}',
        ...options
    });
};

/**
 * Get Workflow Templates
 * Get all available workflow templates.
 *
 * Returns:
 * List of workflow templates
 */
export const getWorkflowTemplatesApiV1WorkflowTemplatesGet = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowTemplatesApiV1WorkflowTemplatesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowTemplatesApiV1WorkflowTemplatesGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/workflow/templates',
        ...options
    });
};

/**
 * Duplicate Workflow Template
 * Duplicate a workflow template to create a new workflow for the user.
 *
 * Args:
 * request: The duplicate template request
 * user: The authenticated user
 *
 * Returns:
 * The newly created workflow
 */
export const duplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePost = <ThrowOnError extends boolean = false>(options: Options<DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostResponse, DuplicateWorkflowTemplateApiV1WorkflowTemplatesDuplicatePostError, ThrowOnError>({
        url: '/api/v1/workflow/templates/duplicate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Default Configurations
 */
export const getDefaultConfigurationsApiV1UserConfigurationsDefaultsGet = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDefaultConfigurationsApiV1UserConfigurationsDefaultsGetResponse, unknown, ThrowOnError>({
        url: '/api/v1/user/configurations/defaults',
        ...options
    });
};

/**
 * Get Auth User
 */
export const getAuthUserApiV1UserAuthUserGet = <ThrowOnError extends boolean = false>(options?: Options<GetAuthUserApiV1UserAuthUserGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthUserApiV1UserAuthUserGetResponse, GetAuthUserApiV1UserAuthUserGetError, ThrowOnError>({
        url: '/api/v1/user/auth/user',
        ...options
    });
};

/**
 * Get User Configurations
 */
export const getUserConfigurationsApiV1UserConfigurationsUserGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserConfigurationsApiV1UserConfigurationsUserGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserConfigurationsApiV1UserConfigurationsUserGetResponse, GetUserConfigurationsApiV1UserConfigurationsUserGetError, ThrowOnError>({
        url: '/api/v1/user/configurations/user',
        ...options
    });
};

/**
 * Update User Configurations
 */
export const updateUserConfigurationsApiV1UserConfigurationsUserPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserConfigurationsApiV1UserConfigurationsUserPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserConfigurationsApiV1UserConfigurationsUserPutResponse, UpdateUserConfigurationsApiV1UserConfigurationsUserPutError, ThrowOnError>({
        url: '/api/v1/user/configurations/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Validate User Configurations
 */
export const validateUserConfigurationsApiV1UserConfigurationsUserValidateGet = <ThrowOnError extends boolean = false>(options?: Options<ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetResponse, ValidateUserConfigurationsApiV1UserConfigurationsUserValidateGetError, ThrowOnError>({
        url: '/api/v1/user/configurations/user/validate',
        ...options
    });
};

/**
 * Get Api Keys
 * Get all API keys for the user's selected organization.
 */
export const getApiKeysApiV1UserApiKeysGet = <ThrowOnError extends boolean = false>(options?: Options<GetApiKeysApiV1UserApiKeysGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiKeysApiV1UserApiKeysGetResponse, GetApiKeysApiV1UserApiKeysGetError, ThrowOnError>({
        url: '/api/v1/user/api-keys',
        ...options
    });
};

/**
 * Create Api Key
 * Create a new API key for the user's selected organization.
 */
export const createApiKeyApiV1UserApiKeysPost = <ThrowOnError extends boolean = false>(options: Options<CreateApiKeyApiV1UserApiKeysPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiKeyApiV1UserApiKeysPostResponse, CreateApiKeyApiV1UserApiKeysPostError, ThrowOnError>({
        url: '/api/v1/user/api-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive Api Key
 * Archive an API key (soft delete).
 */
export const archiveApiKeyApiV1UserApiKeysApiKeyIdDelete = <ThrowOnError extends boolean = false>(options: Options<ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteResponse, ArchiveApiKeyApiV1UserApiKeysApiKeyIdDeleteError, ThrowOnError>({
        url: '/api/v1/user/api-keys/{api_key_id}',
        ...options
    });
};

/**
 * Reactivate Api Key
 * Reactivate an archived API key.
 */
export const reactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePut = <ThrowOnError extends boolean = false>(options: Options<ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutResponse, ReactivateApiKeyApiV1UserApiKeysApiKeyIdReactivatePutError, ThrowOnError>({
        url: '/api/v1/user/api-keys/{api_key_id}/reactivate',
        ...options
    });
};

/**
 * Create Campaign
 * Create a new campaign
 */
export const createCampaignApiV1CampaignCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateCampaignApiV1CampaignCreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCampaignApiV1CampaignCreatePostResponse, CreateCampaignApiV1CampaignCreatePostError, ThrowOnError>({
        url: '/api/v1/campaign/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Campaigns
 * Get campaigns for user's organization
 */
export const getCampaignsApiV1CampaignGet = <ThrowOnError extends boolean = false>(options?: Options<GetCampaignsApiV1CampaignGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCampaignsApiV1CampaignGetResponse, GetCampaignsApiV1CampaignGetError, ThrowOnError>({
        url: '/api/v1/campaign/',
        ...options
    });
};

/**
 * Get Campaign
 * Get campaign details
 */
export const getCampaignApiV1CampaignCampaignIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCampaignApiV1CampaignCampaignIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCampaignApiV1CampaignCampaignIdGetResponse, GetCampaignApiV1CampaignCampaignIdGetError, ThrowOnError>({
        url: '/api/v1/campaign/{campaign_id}',
        ...options
    });
};

/**
 * Start Campaign
 * Start campaign execution
 */
export const startCampaignApiV1CampaignCampaignIdStartPost = <ThrowOnError extends boolean = false>(options: Options<StartCampaignApiV1CampaignCampaignIdStartPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartCampaignApiV1CampaignCampaignIdStartPostResponse, StartCampaignApiV1CampaignCampaignIdStartPostError, ThrowOnError>({
        url: '/api/v1/campaign/{campaign_id}/start',
        ...options
    });
};

/**
 * Pause Campaign
 * Pause campaign execution
 */
export const pauseCampaignApiV1CampaignCampaignIdPausePost = <ThrowOnError extends boolean = false>(options: Options<PauseCampaignApiV1CampaignCampaignIdPausePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PauseCampaignApiV1CampaignCampaignIdPausePostResponse, PauseCampaignApiV1CampaignCampaignIdPausePostError, ThrowOnError>({
        url: '/api/v1/campaign/{campaign_id}/pause',
        ...options
    });
};

/**
 * Get Campaign Runs
 * Get campaign workflow runs
 */
export const getCampaignRunsApiV1CampaignCampaignIdRunsGet = <ThrowOnError extends boolean = false>(options: Options<GetCampaignRunsApiV1CampaignCampaignIdRunsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCampaignRunsApiV1CampaignCampaignIdRunsGetResponse, GetCampaignRunsApiV1CampaignCampaignIdRunsGetError, ThrowOnError>({
        url: '/api/v1/campaign/{campaign_id}/runs',
        ...options
    });
};

/**
 * Resume Campaign
 * Resume a paused campaign
 */
export const resumeCampaignApiV1CampaignCampaignIdResumePost = <ThrowOnError extends boolean = false>(options: Options<ResumeCampaignApiV1CampaignCampaignIdResumePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResumeCampaignApiV1CampaignCampaignIdResumePostResponse, ResumeCampaignApiV1CampaignCampaignIdResumePostError, ThrowOnError>({
        url: '/api/v1/campaign/{campaign_id}/resume',
        ...options
    });
};

/**
 * Get Campaign Progress
 * Get current campaign progress and statistics
 */
export const getCampaignProgressApiV1CampaignCampaignIdProgressGet = <ThrowOnError extends boolean = false>(options: Options<GetCampaignProgressApiV1CampaignCampaignIdProgressGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCampaignProgressApiV1CampaignCampaignIdProgressGetResponse, GetCampaignProgressApiV1CampaignCampaignIdProgressGetError, ThrowOnError>({
        url: '/api/v1/campaign/{campaign_id}/progress',
        ...options
    });
};

/**
 * Get Campaign Source Download Url
 * Get presigned download URL for campaign CSV source file
 *
 * Only works for CSV source type. For Google Sheets, use the source_id directly.
 * Validates that the campaign belongs to the user's organization for security.
 */
export const getCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGet = <ThrowOnError extends boolean = false>(options: Options<GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetResponse, GetCampaignSourceDownloadUrlApiV1CampaignCampaignIdSourceDownloadUrlGetError, ThrowOnError>({
        url: '/api/v1/campaign/{campaign_id}/source-download-url',
        ...options
    });
};

/**
 * Get Integrations
 * Get all integrations for the user's selected organization.
 *
 * Returns:
 * List of integrations associated with the user's selected organization
 */
export const getIntegrationsApiV1IntegrationGet = <ThrowOnError extends boolean = false>(options?: Options<GetIntegrationsApiV1IntegrationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIntegrationsApiV1IntegrationGetResponse, GetIntegrationsApiV1IntegrationGetError, ThrowOnError>({
        url: '/api/v1/integration/',
        ...options
    });
};

/**
 * Create Session
 * Create a Nango session for the user's selected organization.
 *
 * Returns:
 * Session token and ID for the created session
 */
export const createSessionApiV1IntegrationSessionPost = <ThrowOnError extends boolean = false>(options?: Options<CreateSessionApiV1IntegrationSessionPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateSessionApiV1IntegrationSessionPostResponse, CreateSessionApiV1IntegrationSessionPostError, ThrowOnError>({
        url: '/api/v1/integration/session',
        ...options
    });
};

/**
 * Update Integration
 * Update an integration's selected files (for Google Sheets).
 *
 * Args:
 * integration_id: The ID of the integration to update
 * request: The update request containing selected files
 * user: The authenticated user
 *
 * Returns:
 * Updated integration details
 */
export const updateIntegrationApiV1IntegrationIntegrationIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateIntegrationApiV1IntegrationIntegrationIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateIntegrationApiV1IntegrationIntegrationIdPutResponse, UpdateIntegrationApiV1IntegrationIntegrationIdPutError, ThrowOnError>({
        url: '/api/v1/integration/{integration_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Integration Access Token
 * Get the latest access token for an integration from Nango.
 *
 * Args:
 * integration_id: The ID of the integration
 * user: The authenticated user
 *
 * Returns:
 * Dict containing access token and expiration info
 */
export const getIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGet = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetResponse, GetIntegrationAccessTokenApiV1IntegrationIntegrationIdAccessTokenGetError, ThrowOnError>({
        url: '/api/v1/integration/{integration_id}/access-token',
        ...options
    });
};

/**
 * Get Telephony Configuration
 * Get telephony configuration for the user's organization with masked sensitive fields.
 *
 * Args:
 * provider: Optional provider filter ('twilio' or 'vonage').
 * If specified, only returns config if it matches the stored provider.
 */
export const getTelephonyConfigurationApiV1OrganizationsTelephonyConfigGet = <ThrowOnError extends boolean = false>(options?: Options<GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetResponse, GetTelephonyConfigurationApiV1OrganizationsTelephonyConfigGetError, ThrowOnError>({
        url: '/api/v1/organizations/telephony-config',
        ...options
    });
};

/**
 * Save Telephony Configuration
 * Save telephony configuration for the user's organization.
 */
export const saveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPost = <ThrowOnError extends boolean = false>(options: Options<SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, SaveTelephonyConfigurationApiV1OrganizationsTelephonyConfigPostError, ThrowOnError>({
        url: '/api/v1/organizations/telephony-config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate a signed S3 URL
 * Return a short-lived signed URL for a transcript or recording file stored on S3.
 *
 * Access Control:
 * * Superusers can request any key.
 * * Regular users can only request resources belonging to **their** workflow runs.
 */
export const getSignedUrlApiV1S3SignedUrlGet = <ThrowOnError extends boolean = false>(options: Options<GetSignedUrlApiV1S3SignedUrlGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSignedUrlApiV1S3SignedUrlGetResponse, GetSignedUrlApiV1S3SignedUrlGetError, ThrowOnError>({
        url: '/api/v1/s3/signed-url',
        ...options
    });
};

/**
 * Get file metadata for debugging
 * Get file metadata including creation timestamp for debugging.
 *
 * Access Control:
 * * Superusers can request any key.
 * * Regular users can only request resources belonging to **their** workflow runs.
 */
export const getFileMetadataApiV1S3FileMetadataGet = <ThrowOnError extends boolean = false>(options: Options<GetFileMetadataApiV1S3FileMetadataGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileMetadataApiV1S3FileMetadataGetResponse, GetFileMetadataApiV1S3FileMetadataGetError, ThrowOnError>({
        url: '/api/v1/s3/file-metadata',
        ...options
    });
};

/**
 * Generate a presigned URL for direct CSV upload
 * Generate a presigned PUT URL for direct CSV file upload to S3/MinIO.
 *
 * This endpoint enables browser-to-storage uploads without passing through the backend
 *
 * Access Control:
 * * All authenticated users can upload CSV files scoped to their organization.
 * * Files are stored with organization-scoped keys for multi-tenancy.
 *
 * Returns:
 * * upload_url: Presigned URL (valid for 15 minutes) for PUT request
 * * file_key: Unique storage key to use as source_id in campaign creation
 * * expires_in: URL expiration time in seconds
 */
export const getPresignedUploadUrlApiV1S3PresignedUploadUrlPost = <ThrowOnError extends boolean = false>(options: Options<GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostResponse, GetPresignedUploadUrlApiV1S3PresignedUploadUrlPostError, ThrowOnError>({
        url: '/api/v1/s3/presigned-upload-url',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Service Keys
 * Get all service keys for the user's organization.
 */
export const getServiceKeysApiV1UserServiceKeysGet = <ThrowOnError extends boolean = false>(options?: Options<GetServiceKeysApiV1UserServiceKeysGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetServiceKeysApiV1UserServiceKeysGetResponse, GetServiceKeysApiV1UserServiceKeysGetError, ThrowOnError>({
        url: '/api/v1/user/service-keys',
        ...options
    });
};

/**
 * Create Service Key
 * Create a new service key for the user's organization.
 */
export const createServiceKeyApiV1UserServiceKeysPost = <ThrowOnError extends boolean = false>(options: Options<CreateServiceKeyApiV1UserServiceKeysPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateServiceKeyApiV1UserServiceKeysPostResponse, CreateServiceKeyApiV1UserServiceKeysPostError, ThrowOnError>({
        url: '/api/v1/user/service-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Archive Service Key
 * Archive a service key.
 */
export const archiveServiceKeyApiV1UserServiceKeysServiceKeyIdDelete = <ThrowOnError extends boolean = false>(options: Options<ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, ArchiveServiceKeyApiV1UserServiceKeysServiceKeyIdDeleteError, ThrowOnError>({
        url: '/api/v1/user/service-keys/{service_key_id}',
        ...options
    });
};

/**
 * Reactivate Service Key
 * Reactivate an archived service key.
 *
 * Note: This endpoint is provided for API compatibility but service key
 * reactivation is not supported by MPS. Once archived, a service key
 * cannot be reactivated and a new key must be created instead.
 */
export const reactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePut = <ThrowOnError extends boolean = false>(options: Options<ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, ReactivateServiceKeyApiV1UserServiceKeysServiceKeyIdReactivatePutError, ThrowOnError>({
        url: '/api/v1/user/service-keys/{service_key_id}/reactivate',
        ...options
    });
};

/**
 * List Test Sessions
 * List LoopTalk test sessions.
 */
export const listTestSessionsApiV1LooptalkTestSessionsGet = <ThrowOnError extends boolean = false>(options?: Options<ListTestSessionsApiV1LooptalkTestSessionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTestSessionsApiV1LooptalkTestSessionsGetResponse, ListTestSessionsApiV1LooptalkTestSessionsGetError, ThrowOnError>({
        url: '/api/v1/looptalk/test-sessions',
        ...options
    });
};

/**
 * Create Test Session
 * Create a new LoopTalk test session.
 */
export const createTestSessionApiV1LooptalkTestSessionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTestSessionApiV1LooptalkTestSessionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTestSessionApiV1LooptalkTestSessionsPostResponse, CreateTestSessionApiV1LooptalkTestSessionsPostError, ThrowOnError>({
        url: '/api/v1/looptalk/test-sessions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Test Session
 * Get a specific test session.
 */
export const getTestSessionApiV1LooptalkTestSessionsTestSessionIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetResponse, GetTestSessionApiV1LooptalkTestSessionsTestSessionIdGetError, ThrowOnError>({
        url: '/api/v1/looptalk/test-sessions/{test_session_id}',
        ...options
    });
};

/**
 * Start Test Session
 * Start a LoopTalk test session.
 */
export const startTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPost = <ThrowOnError extends boolean = false>(options: Options<StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, StartTestSessionApiV1LooptalkTestSessionsTestSessionIdStartPostError, ThrowOnError>({
        url: '/api/v1/looptalk/test-sessions/{test_session_id}/start',
        ...options
    });
};

/**
 * Stop Test Session
 * Stop a running test session.
 */
export const stopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPost = <ThrowOnError extends boolean = false>(options: Options<StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, StopTestSessionApiV1LooptalkTestSessionsTestSessionIdStopPostError, ThrowOnError>({
        url: '/api/v1/looptalk/test-sessions/{test_session_id}/stop',
        ...options
    });
};

/**
 * Get Test Session Conversation
 * Get conversation details for a test session.
 */
export const getTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGet = <ThrowOnError extends boolean = false>(options: Options<GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetTestSessionConversationApiV1LooptalkTestSessionsTestSessionIdConversationGetError, ThrowOnError>({
        url: '/api/v1/looptalk/test-sessions/{test_session_id}/conversation',
        ...options
    });
};

/**
 * Create Load Test
 * Create and start a load test.
 */
export const createLoadTestApiV1LooptalkLoadTestsPost = <ThrowOnError extends boolean = false>(options: Options<CreateLoadTestApiV1LooptalkLoadTestsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLoadTestApiV1LooptalkLoadTestsPostResponse, CreateLoadTestApiV1LooptalkLoadTestsPostError, ThrowOnError>({
        url: '/api/v1/looptalk/load-tests',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Load Test Stats
 * Get statistics for a load test group.
 */
export const getLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGet = <ThrowOnError extends boolean = false>(options: Options<GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetResponse, GetLoadTestStatsApiV1LooptalkLoadTestsLoadTestGroupIdStatsGetError, ThrowOnError>({
        url: '/api/v1/looptalk/load-tests/{load_test_group_id}/stats',
        ...options
    });
};

/**
 * Get Active Tests
 * Get information about currently active test sessions.
 */
export const getActiveTestsApiV1LooptalkActiveTestsGet = <ThrowOnError extends boolean = false>(options?: Options<GetActiveTestsApiV1LooptalkActiveTestsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetActiveTestsApiV1LooptalkActiveTestsGetError, ThrowOnError>({
        url: '/api/v1/looptalk/active-tests',
        ...options
    });
};

/**
 * Get Current Period Usage
 * Get current billing period usage for the user's organization.
 */
export const getCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetResponse, GetCurrentPeriodUsageApiV1OrganizationsUsageCurrentPeriodGetError, ThrowOnError>({
        url: '/api/v1/organizations/usage/current-period',
        ...options
    });
};

/**
 * Get Usage History
 * Get paginated workflow runs with usage for the organization.
 */
export const getUsageHistoryApiV1OrganizationsUsageRunsGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsageHistoryApiV1OrganizationsUsageRunsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsageHistoryApiV1OrganizationsUsageRunsGetResponse, GetUsageHistoryApiV1OrganizationsUsageRunsGetError, ThrowOnError>({
        url: '/api/v1/organizations/usage/runs',
        ...options
    });
};

/**
 * Get Daily Usage Breakdown
 * Get daily usage breakdown for the last N days. Only available for organizations with pricing.
 */
export const getDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGet = <ThrowOnError extends boolean = false>(options?: Options<GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetResponse, GetDailyUsageBreakdownApiV1OrganizationsUsageDailyBreakdownGetError, ThrowOnError>({
        url: '/api/v1/organizations/usage/daily-breakdown',
        ...options
    });
};

/**
 * Get Daily Report
 * Get daily report for the specified date and timezone.
 * If workflow_id is provided, filters results to that specific workflow.
 * If workflow_id is None, includes all workflows for the organization.
 */
export const getDailyReportApiV1OrganizationsReportsDailyGet = <ThrowOnError extends boolean = false>(options: Options<GetDailyReportApiV1OrganizationsReportsDailyGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailyReportApiV1OrganizationsReportsDailyGetResponse, GetDailyReportApiV1OrganizationsReportsDailyGetError, ThrowOnError>({
        url: '/api/v1/organizations/reports/daily',
        ...options
    });
};

/**
 * Get Workflow Options
 * Get all workflows for the user's organization.
 * Used to populate the workflow selector dropdown in the reports page.
 */
export const getWorkflowOptionsApiV1OrganizationsReportsWorkflowsGet = <ThrowOnError extends boolean = false>(options?: Options<GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetResponse, GetWorkflowOptionsApiV1OrganizationsReportsWorkflowsGetError, ThrowOnError>({
        url: '/api/v1/organizations/reports/workflows',
        ...options
    });
};

/**
 * Get Daily Runs Detail
 * Get detailed workflow runs for the specified date.
 * Used for CSV export functionality.
 */
export const getDailyRunsDetailApiV1OrganizationsReportsDailyRunsGet = <ThrowOnError extends boolean = false>(options: Options<GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetResponse, GetDailyRunsDetailApiV1OrganizationsReportsDailyRunsGetError, ThrowOnError>({
        url: '/api/v1/organizations/reports/daily/runs',
        ...options
    });
};

/**
 * Health
 */
export const healthApiV1HealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthApiV1HealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/health',
        ...options
    });
};